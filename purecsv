#!/usr/bin/env bash
set +vx
# purecsv - Make virtual FTP accounts and optionally mail out details
# Usage: purecsv [-d|--delete] [-n|--norun]
#        -n/--norun:   Only display what would have been done
#        -d/--delete:  Delete all current users and start the database afresh.
#        Otherwise current users' details are preserved (unless given new).
#    Processes `pure.csv` (in PWD): [#]<directory>,<username>,[<email>]
#        Lines starting with '#' are ignored. Always start <directory> with '/'.
# Required: pureftp[github.com/pepa65/pure-ftpd](pure-pw) grep sed
#           mailer[github.com/pepa65/mailer] coreutils(mkdir rm mv cp mktemp touch)

Err(){ # 1:msg
	echo "Error: $1"
	exit 1
}

Add(){ # 1:dir 2:user 3:email I:home,norun,delete,passwd O:entries
	local user=$1 dir=$2 mail=$3 pw=$(mktemp -u XXXXXXXXXXXX)  # pw: No commas!
	if ((norun))
	then # Pretend
		sudo grep -q "^$user:" "$passwd" &&
			echo "Would have added '$user' on '$dir' and created it" &&
			entries+=("$mail,$user,$dir,$pw") ||
			echo "Username '$user' already exists"
	else # Execute
		if echo -e "$pw\n$pw" |
				sudo pure-pw useradd "$user" -u pureftp -d "$home$dir" &>/dev/null
		then # Adding successful
			echo "User '$user' at '$home$dir' added to PureFTPd Virtual Users database"
			sudo -u pureftp -g pureftp mkdir -p "$home$dir"
			entries+=("$mail,$user,$dir,$pw")
		else # Error adding the user
			echo "Unable to add username '$user' on '$dir', probably a duplicate user!"
		fi
	fi
}

# Check commandline argument
passwd=/etc/pureftpd.passwd home=/home/pureftp csv=pure.csv delete=0 norun=0
[[ $1 = -d || $1 = --delete ]] &&
	shift &&
	delete=1
[[ $1 = -n || $1 = --norun ]] &&
	shift &&
	norun=1
if [[ $1 = -d || $1 = --delete ]]
then
	shift
	((delete)) &&
		delete=1 ||
		Err "flag -d/--delete given twice!"
fi

[[ $1 ]] &&
	Err "wrong argument, only -d/--delete / -n/--norun allowed (once)"

[[ ! -f $csv ]] &&
	Err "csv-file '$csv' not found"

if ((norun))
then # Pretend
	((delete)) &&
		echo "Would have backed up '$passwd' to '$passwd-backup' and emptied the database" ||
		echo "Would have backed up '$passwd' to '$passwd-backup'"
else # Execute
	if ((delete))
	then # Start with empty database
		sudo mv -f --backup=t "$passwd" "$passwd-backup"
		sudo touch "$passwd"
		echo "Database emptied, backup made"
	else # Just backup and keep the current database
		sudo cp -f --backup=t "$passwd" "$passwd-backup"
		echo "Database backup made"
	fi
	ls -l "$passwd"-*
fi

while IFS=, read -r -d $'\n' user dir email
do # Process line
	[[ ${dir:0:1} = '#' ]] &&
		echo "Comment: $user,$dir,$email" &&
		continue
	[[ -z $dir ]] && Err "no directory found in line"
	[[ $dir = *' '* ]] && Err "directory cannot have spaces"
	[[ $dir = *,* ]] && Err "directory cannot have commas"
	[[ -z $user ]] && Err "no username found in line"
	[[ $user = *' '* ]] && Err "username cannot have spaces"
	[[ $user = *,* ]] && Err "username cannot have commas"
	[[ $mail = *' '* ]] && Err "email cannot have spaces"
	[[ $mail = *,* ]] && Err "email cannot have commas"
	Add "$user" "$dir" "$email"
done <"$csv"

if ((norun))
then # Pretend
	echo "Would have commit changes to PureFTPd"
else # Execute
	sudo pure-pw mkdb &&
		echo "Database changes committed, PureFTPd is now using them" ||
		Err "failure to commit changes to database"
fi

# Mailing the details out
((!norun)) &&
	read -p "Press Enter to send all the mails (Ctrl-C to quit)"

_=$(grep '^machine ' .netrc) machine=${_##* }
_=$(grep '^login ' .netrc) login=${_##* }
_=$(grep '^password ' .netrc) password=${_##* }
[[ -z $machine || -z $login || -z $password ]] &&
	Err "prep the file '.netrc' with lines 'machine', 'login' and 'password'"

text="This is an automated mail from CRICS.
Your information for logging in to the FTP server for Computer Science:

FTP server: $machine
Username: USER
Password: PW

Blessings,
The IT Team
"

for entry in "${entries[@]}"  # "<user>,<dir>,<pw>,<mail>"
do # Get data and mail it
	IFS=, read -r mail user dir pw mail <<<"$entry"
	if ((norun))
	then # Pretend
		[[ $mail ]] &&
			echo "Would have mailed the password for '$user' on '$dir' to: $mail" ||
			echo "Would have displayed the password for '$user' on '$dir'"
	else # Execute
		if [[ $mail ]]
		then
			txt=$(sed -e "s/USER/$user/" -e "s/PW/$pw/" <<<"$text")
			((!norun)) && mailer -m "$txt" -t $mail -s "Computer Science FTP login" -u $login -p $password
			echo "Login details for user '$user' on '$dir' mailed to: $mail"
		else
			echo "Password for user '$user' on '$dir' is: $pw"
		fi
	fi
done
